package com.example.final_test;

public class Map {
    public static int mInfoSizeRow = 20; //배열상 20x20
    public static int mInfoSizeCol = 20;

    public static int mWidth = 100; //맵하나의 가로 세로 양
    public static int mHeight = 60;

    //1차원으로 관리
    public static short[][] mOrgLand = new short[10][400];
    public static short[][] mOrgForce = new short[10][400];//병사

    //맵 정보
    public static int[][] mInfo = new int[mInfoSizeRow][mInfoSizeCol];
    public static Panel[][] mLand = new Panel[mInfoSizeRow][mInfoSizeCol];

    //마지막인자가 0일때 0:땅 1:아군 2:적군 3:지형물
    //1일때 병사의 인덱스 값
    //병사일 경우 병사의 타입, 지형물일 경우 나무,가옥의 종류
    public static int[][][] mLandForceInfo = new int[mInfoSizeRow][mInfoSizeCol][3];

    public static float getPosX(int i, int j) {
        return 1000 - (i * mWidth / 2) + (j * mWidth / 2);//배열 인덱스에 따른 가로 위치
        //마름모 모양 맵에서 0,0은 제일 상단 중간
        //중간의 가로 값 1000 따라서 1000에서 좌우로 인덱스에 따라 움직임
    }

    public static float getPosY(int i, int j) {
        return 1200 - (i * mHeight / 2) - (j * mHeight / 2) - mHeight / 2;//배열 인덱스에 따른 세로 위치
        //맨위를 0,0이라 가정했을시 1200에서 비스듬이 내려오는 방식
    }

    //단계별
    public static int mStep = 1;
    public static int mMoney;


    // 맵의 정보를 실시간 공유하기 위한 메소드
    public static void setForceInfo(int i,int j, int kind, int index){
        mLandForceInfo[i][j][0] = kind;
        mLandForceInfo[i][j][1] = index;
    }
    // 맵 단계설정
    public static void setStep(int step) {
        int count = 0;
        mStep = step;

        for(int i=0; i< mInfoSizeRow; i++){
            for(int j=0; j<mInfoSizeRow; j++){
                mLandForceInfo[i][j][0] = 0;    // 0: 지형,, 1:아군, 2:적군, 3:지형물
                mLandForceInfo[i][j][1] = 0;    // 병사의 엑덱스
                mLandForceInfo[i][j][2] = 0;    // 병사아의 타입, 지형물 가옥, 나무의 종류
            }
        }

        // 스탭별 맵을 로딩
        for (int i = 0; i < mInfoSizeRow; i++) {
            for (int j = 0; j < mInfoSizeCol; j++) {
                mInfo[i][j] = mOrgLand[step-1][i * 20 + j];
                if(mOrgForce[step-1][i*20 + j] != -1){
                    mLandForceInfo[i][j][0] = ConstMgr.KIND_ENEMY;
                    mLandForceInfo[i][j][1] = count;
                    mLandForceInfo[i][j][2] = mOrgForce[step-1][i*20 + j];
                    count++;
                }
            }
        }

        int treeCount = 0;
        for (int i = 0; i < mInfoSizeRow; i++) {
            for (int j = 0; j < mInfoSizeCol; j++) {
                if(mInfo[i][i] >=2) {//2이상의 값은 나무 또는 가옥이므로 별도로 할당한다.
                    mLandForceInfo[i][j][0] = 3;
                    mLandForceInfo[i][j][1] = treeCount;
                    treeCount++;
                }
            }
        }
    }

    //지형 초기화
    public static void getMap() {
        mOrgLand[0] = new short[]{
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 1, 1, 1, 1, 1, 1, 1,
                0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 3, 0, 0, 0, 6, 0, 0, 2, 6, 0, 4, 0, 0, 0, 0, 0, 2, 0,
                0, 0, 0, 4, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0,
                1, 1, 1, 1, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        };


        mOrgLand[1] = new short[]{
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 2, 0, 0, 6, 0, 0, 1, 1, 1, 1, 1, 0, 1, 7, 0, 0, 0, 3, 0,
                0, 0, 0, 0, 6, 0, 0, 1, 1, 1, 1, 1, 0, 0, 7, 0, 0, 0, 3, 0,
                0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 2, 0,
                0, 0, 0, 0, 6, 0, 2, 1, 1, 1, 1, 1, 0, 0, 2, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        };

        mOrgForce[0]=new short[]{
                -1, 2, 2, 2, -1, -1, -1, -1, 3, -1, 4, 3, -1, -1, -1, -1, 2, 2, 2, -1,
                -1, 2, 2, 2, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1, 2, 2, 2, -1,
                -1, 0, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 5, 0, -1,
                -1, 1, 1, 1, -1, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 1, 1, 1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
        };

        mOrgForce[1]=new short[]{
                -1, 2, 2, 2, -1, -1, -1, 3, 4, 4, 4, 4, 3, -1, -1, -1, 2, 3, 2, -1,
                -1, 2, 2, 2, -1, -1, -1, 3, 3, 3, 3, 3, 3, -1, -1, -1, 2, 2, 2, -1,
                -1, 0, 5, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, 5, 0, -1,
                -1, 1, 1, 1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 1, -1,
                -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
        };
    }
}